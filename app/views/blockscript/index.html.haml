:javascript
  g_scripts = {};
  g_current_script_id = null;

  // Loads the script referenced by g_current_script_id into the editor.
  function load_current_script() {
    if (g_current_script_id == null) {
      Blockly.mainWorkspace.clear();
    } else {
      var blockly_encoding = g_scripts[g_current_script_id]["command"];
      Blockly.mainWorkspace.clear();
      if (blockly_encoding != "") {
        var xml = Blockly.Xml.textToDom(blockly_encoding);
        Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, xml);
      }
    }
  }

  function store_current_script() {
    if (g_current_script_id != null) {
      var xml = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
      g_scripts[g_current_script_id]["command"] =
         Blockly.Xml.domToPrettyText(xml);
    }
  }

  function select_script(new_script_id) {
    store_current_script();
    g_current_script_id = new_script_id;
    load_current_script();
  }

  function update_scripts() {
    default_communicator.get(
      "/blockscript/get",
      function (data) {
        g_scripts = {};
        var script_select_html = "";
        $.each(data["data"], function (i, v) {
          g_scripts[v["id"]] = v;
          // TODO(mtomczak): v[name] here needs to be HTML-escaped
          script_select_html += "<option value=\"" + v["id"]
             + "\">" + v["name"] + "</option>\n";
        });
        $("#script_select").html(script_select_html);
        choose_default_script();
      });
  }

  function new_script() {
    var name = $("#blockscript_new_name_field").val();
    default_communicator.post(
      "/blockscript/add",
      {
        "name" : name,
        "command" : "<xml></xml>",
      },
      function (data) {
        update_scripts();
        $("#new_script_name").hide();
      });
  }

  // Saves the current script.
  function save_script() {
    store_current_script();
    default_communicator.post(
      "/blockscript/update",
      g_scripts[g_current_script_id],
      function (data) {
        update_scripts();
      });
  }

  function delete_script() {
    // TODO(mtomczak): Undo butter-bar
    if (g_current_script_id != null) {
      default_communicator.post(
        "/blockscript/delete",
        g_scripts[g_current_script_id],
        function (data) {
          g_current_script_id = null;
          update_scripts();
        });
    }
  }

  // Selects a valid script in the option list.
  function choose_default_script() {
    if (g_current_script_id != null) {
      return;
    }
    g_current_script_id = $("#script_select").children("option:selected").val();
    load_current_script();
  }

  function blocklyLoaded(blockly) {
    window.Blockly = blockly;
    // resize iframe
    // TODO(mtomczak): This should be possible with pure CSS,
    // but there comes a time in a man's life when he just
    // wants things positioned correctly without a lot of
    // cogitation on embedding rules and what needs to resize
    // to where.
    $("#blockly_frame").height($(window).height() - 130);
    $(function () {
      $("#blockscript_new").button().click(
        function () {
          $("#new_script_name").show();
        });
      $("#blockscript_new_name_save").button().click(new_script);
      $("#blockscript_new_name_cancel").button().click(
        function () {
          $("#new_script_name").hide();
        });
      $("#blockscript_run").button();
      $("#blockscript_delete").button().click(delete_script);
      $("#blockscript_save").button().click(save_script);
      $("#new_script_name").hide();
      $("#script_select").change(function () {
        select_script($("#script_select").children("option:selected").val());
      });
      update_scripts();
    });
  }

.script_selector
  .script_buttons
    %button{:id=>"blockscript_new"} New Script
    %button{:id=>"blockscript_run"} Run Script
    %button{:id=>"blockscript_delete"} Delete Script
    %button{:id=>"blockscript_save"} Save Script
  %select{:id=>"script_select"}
    %option{:value=>"Test1"} Test 1
    %option{:value=>"Test2"} Test 2

%iframe{:src=>"frame", :id=>"blockly_frame"}
.dialog{:id=>"new_script_name"}
  .background
  .inner_frame
    %p Enter name of new script:
    %p
      %input{:type=>"text", :id=>"blockscript_new_name_field"}
    .dialog_buttons
      %button{:id=>"blockscript_new_name_save"} Save
      %button{:id=>"blockscript_new_name_cancel"} Cancel
