%link{:href => "qunit/qunit/qunit.css",:rel => "stylesheet", :type => "text/css"}
%script{:type => "text/javascript", :src=> "qunit/qunit/qunit.js"}
= javascript_include_tag "ajaxcrud"
:javascript
  test("Qunit online", function() {
    ok(true, "QUnit online.");
  });

  module("Role");
  test("Create role", function() {
    var role = new Role('{"name" : "test", "data" : "test data"}', "http://test_url");
    equal(role.name(), "test");
    equal(role.url, "http://test_url");
  });

  module("Ajaxcrud");
  test("Row parsing", function() {
    var crud = new AjaxCrud("ignored", "duck", "ducks", "ignored", {})
      .add_text_input("Foo", "foo")
      .add_checkbox_input("Bar", "bar")
      .add_text_input("Baz", "baz");
    var content = crud.row_html_content({
      "foo" : "Test 1",
      "bar" : true,
      "baz" : "Test 2"},
      "duck_1");
    equal(content,
      "<li class='row' id='duck_1'><div class='field field_foo'>"
      + "Test 1</div>"
      + "<div class='field field_bar'>true</div>"
      + "<div class='field field_baz'>Test 2</div>"
      + "<div class='buttons' id='duck_1_buttons'>"
      + "<button id='button_edit_duck_1'>Edit</button>"
      + "<button id='button_delete_duck_1'>Delete</button>"
      + "</div>"
      + "</li>");
    header = crud.header_html_content();
    equal(header,
      "<div class='header'>"
      + "<div class='column field_foo'>Foo</div>"
      + "<div class='column field_bar'>Bar</div>"
      + "<div class='column field_baz'>Baz</div>"
      + "</div>");
  });
  test("Display JSON object", function() {
    var crud = new AjaxCrud("ignored", "duck", "ducks", "ignored", {})
      .add_text_input("Foo", "foo")
      .add_checkbox_input("Bar", "bar")
      .add_text_input("Baz", "baz");
    var content = crud.crud_html_content([
        {
          "id" : 1,
          "foo" : "Row 1 test 1",
          "bar" : true,
          "baz" : "Row 1 test 2"
        },
        {
          "id" : 2,
          "foo" : "Row 2 test 1",
          "bar" : false,
          "baz" : "Row 2 test 2"
        }
      ]);
    equal(content,
          "<div class='ajaxcrud' id='ajaxcrud_ducks'>"
          + "<div class='header'>"
          + "<div class='column field_foo'>Foo</div>"
          + "<div class='column field_bar'>Bar</div>"
          + "<div class='column field_baz'>Baz</div>"
          + "</div>"
          + "<ul class='rows'>"
          + "<li class='row' id='duck_1'>"
          + "<div class='field field_foo'>Row 1 test 1</div>"
          + "<div class='field field_bar'>true</div>"
          + "<div class='field field_baz'>Row 1 test 2</div>"
          + "<div class='buttons' id='duck_1_buttons'>"
          + "<button id='button_edit_duck_1'>Edit</button>"
          + "<button id='button_delete_duck_1'>Delete</button>"
          + "</div>"
          + "</li>"
          + "<li class='row' id='duck_2'>"
          + "<div class='field field_foo'>Row 2 test 1</div>"
          + "<div class='field field_bar'>false</div>"
          + "<div class='field field_baz'>Row 2 test 2</div>"
          + "<div class='buttons' id='duck_2_buttons'>"
          + "<button id='button_edit_duck_2'>Edit</button>"
          + "<button id='button_delete_duck_2'>Delete</button>"
          + "</div>"
          + "</li>"
          + "</ul>"
          + "<div class='controls'>"
          + "<button id='button_add_duck'>Add duck</button>"
          + "</div>"
          + "</div>");
  });
  test("Get server data", function () {
    // TODO(mtomczak): These handlers should be set up and torn down properly.
    Handle("TEST_READ", function (data) {
      data.success_handler({
        "data" : [
          {
            "id" : 1,
            "foo" : "Row 1 test 1",
            "bar" : false,
            "baz" : "Row 1 test 2"
          },
          {
            "id" : 2,
            "foo" : "Row 2 test 1",
            "bar" : true,
            "baz" : "Row 2 test 2"
          }
        ]});
    });

    var crud = new AjaxCrud("#test-get-server-data-output", "duck", "ducks", {
    "create_message" : "TEST_CREATE",
    "read_message" : "TEST_READ",
    "update_message" : "TEST_UPDATE",
    "delete_message" : "TEST_DELETE"})
      .add_text_input("Foo", "foo")
      .add_checkbox_input("Bar", "bar")
      .add_text_input("Baz", "baz");
    crud.read();
    equal($("#duck_1 .field_foo").text(), "Row 1 test 1");
    equal($("#duck_1 .field_bar").text(), "false");
    equal($("#duck_1 .field_baz").text(), "Row 1 test 2");
    equal($("#duck_2 .field_foo").text(), "Row 2 test 1");
    equal($("#duck_2 .field_bar").text(), "true");
    equal($("#duck_2 .field_baz").text(), "Row 2 test 2");

    $("#button_edit_duck_2").trigger("click");
    equal($("#duck_2 .ajaxcrud_editor #button_save_duck_2").text(), "Save");
    equal($("#ajaxcrud_input_duck_2_bar").is(':checked'), true);

    var update_called = false;
    Handle("TEST_UPDATE", function(args) {
      update_called = true;
      equal(args.object.id, 2);
      equal(args.object.foo, "Row 2 test 1");
      equal(args.object.bar, true);
      equal(args.object.baz, "Changed");
      args.success_handler();
    });
    $("#ajaxcrud_input_duck_2_baz").val("Changed");
    $("#button_save_duck_2").trigger("click");
    equal(update_called, true);
    equal($("#duck_2 .ajaxcrud_editor #button_save_duck_2").length, 0);

    $("#button_add_duck").trigger("click");
    equal($(".ajaxcrud_editor #button_save_new_duck").text(), "Save");

    $("#ajaxcrud_input_new_duck_foo").val("Output 1");
    $("#ajaxcrud_input_new_duck_bar").attr("checked", "checked");
    $("#ajaxcrud_input_new_duck_baz").val("Output 3");
    var create_called = false;
    Handle("TEST_CREATE", function (args) {
      create_called = true;
      // TODO(mtomczak): ID should not exist.
      equal(args.object.foo, "Output 1");
      equal(args.object.bar, true);
      equal(args.object.baz, "Output 3");
      args.success_handler();
    });

    $("#button_save_new_duck").trigger("click");
    equal($(".ajaxcrud_editor #button_save_new_duck").length, 0);
    equal(create_called, true);

    $("#button_delete_duck_1").trigger("click");
    equal($("#duck_1 .ajaxcrud_delete_confirm #button_duck_1_delete_yes").text(), "Yes");

    var delete_called = false;

    Handle("TEST_DELETE", function (args) {
      delete_called = true;
      equal(args.id, 1);
      args.success_handler();
    });

    $("#button_duck_1_delete_yes").trigger("click");
    equal(delete_called, true);
  });


#qunit-header Belphanior unit tests
#qunit-banner
#qunit-tests
#qunit-userAgent
#test-get-server-data-output